services:
  cowrie:
    image: cowrie/cowrie:2.8.0
    container_name: cowrie
    restart: unless-stopped
    environment:
      - COWRIE_USER=cowrie
    volumes:
      # ❗️Cowrie liest seine Config hier:
      - ./cowrie.cfg:/cowrie/cowrie-git/etc/cowrie.cfg:ro
      # ❗️Mount das Standard-Logverzeichnis von Cowrie:
      - cowrie_log:/cowrie/cowrie-git/var/log/cowrie
    ports:
      - "${COWRIE_SSH_PORT:-2222}:2222"
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket,sys;s=socket.socket(); s.settimeout(1); sys.exit(0 if (s.connect_ex((\"127.0.0.1\",2222))==0) else 1)'"]
      interval: 30s
      timeout: 5s
      retries: 3

  pcap-capture:
    image: nicolaka/netshoot:latest
    container_name: pcap-capture
    # teilt die Netz-Namespace mit cowrie:
    network_mode: "container:cowrie"
    command: >
      sh -c '
        set -e;
        mkdir -p /data/pcap;
        echo "starting tcpdump on port 2222";
        # rotiert jede 60s, Dateiname mit Zeitstempel (strftime)
        while true; do
          tcpdump -i any -nn -s 0 \
            -w /data/pcap/ssh-%Y%m%d-%H%M%S.pcap \
            "tcp port 2222" \
            -G 60 -W 1 || true;
          sleep 1;
        done
      '
    volumes:
      - pcap_data:/data/pcap
    cap_add:
      - NET_ADMIN
      - NET_RAW
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "test -d /data/pcap || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3


  extractor:
    build:
      context: ./extractor
      dockerfile: Dockerfile
    container_name: honeypot-extractor
    restart: unless-stopped
    volumes:
      - pcap_data:/data/pcap
      - out_data:/data/out
      # ❗️Cowrie-Log read-only mounten (richtiger Pfad):
      - cowrie_log:/cowrie/cowrie-git/var/log/cowrie:ro
    environment:
      - OUT_DIR=/data/out
      - PCAP_DIR=/data/pcap
      - COWRIE_JSON=/cowrie/cowrie-git/var/log/cowrie/cowrie.json
      - SENSOR_ID=${SENSOR_ID}
    command: ["python", "/opt/extractor.py",
              "--pcap-dir","/data/pcap",
              "--cowrie-json","/cowrie/cowrie-git/var/log/cowrie/cowrie.json",
              "--out-dir","/data/out",
              "--sensor-id","${SENSOR_ID}",
              "--ssh-port","2222",
              "--scan-interval","10"]
    healthcheck:
      # einfache Datei-Existenzprüfung wäre sinnvoller, aber wir lassen dein HC so stehen
      test: ["CMD", "python", "/opt/healthcheck.py", "127.0.0.1", "1"]
      interval: 30s
      timeout: 5s
      retries: 3

  uploader:
    build:
      context: ./uploader
      dockerfile: Dockerfile
    container_name: honeypot-uploader
    restart: unless-stopped
    volumes:
      # ❗️Cowrie-Log read-only mounten (richtiger Pfad):
      - cowrie_log:/cowrie/cowrie-git/var/log/cowrie:ro
    environment:
      - PYTHONUNBUFFERED=1
      - COWRIE_JSON=/cowrie/cowrie-git/var/log/cowrie/cowrie.json
      - API_KEY=${API_KEY}
      - COLLECTOR_URL=${COLLECTOR_URL}
      - SENSOR_ID=${SENSOR_ID}
      - BATCH_MAX_COUNT=${BATCH_MAX_COUNT}
      - BATCH_MAX_BYTES=${BATCH_MAX_BYTES}
      - BATCH_MAX_SECONDS=${BATCH_MAX_SECONDS}
      - RATE_LIMIT_POSTS_PER_MIN=${RATE_LIMIT_POSTS_PER_MIN}
    depends_on:
      - extractor
    healthcheck:
      test: ["CMD", "python", "/opt/healthcheck.py", "127.0.0.1", "1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  cowrie_log:
  pcap_data:
  out_data:

networks:
  hostnet:
    driver: bridge
