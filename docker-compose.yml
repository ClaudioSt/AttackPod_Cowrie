services:
  cowrie:
    image: cowrie/cowrie:latest
    container_name: cowrie
    restart: unless-stopped
    ports:
      - "22:2222"            # oder "2022:2222"
    volumes:
      - ./cowrie/etc/cowrie.cfg:/cowrie/cowrie-git/etc/cowrie.cfg:ro
      - ./cowrie/etc/userdb.txt:/cowrie/cowrie-git/etc/userdb.txt:ro
      - ./cowrie/etc/banner.txt:/cowrie/cowrie-git/etc/banner.txt:ro
      - ./cowrie/data:/cowrie/log
    healthcheck:
      test: ["CMD", "python3", "-c", "import socket,sys; s=socket.socket(); s.settimeout(2); s.connect(('127.0.0.1',2222)); s.close()"]
      interval: 10s
      timeout: 3s
      retries: 6
      start_period: 10s


  # Packet-Capture im selben Netz-Stack wie cowrie â†’ sieht exakt den Cowrie-Verkehr
  pcap-capture:
    image: nicolaka/netshoot:latest
    container_name: pcap-capture
    network_mode: "service:cowrie"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./data/pcap:/pcap
    depends_on:
      cowrie:
        condition: service_healthy
    command:
      - /bin/sh
      - -lc
      - >
        mkdir -p /pcap &&
        exec tcpdump -U -i eth0 -s 0 -nn
        -C 200 -W 100
        -w /pcap/ssh-%Y%m%d%H%M%S.pcap
        -G 300
        'tcp port 2222'

  uploader:
    build: ./uploader
    container_name: uploader
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      SOURCE_LOG: /cowrie/log/cowrie.json
    volumes:
      - ./cowrie/data:/cowrie/log:ro
    depends_on:
      cowrie:
        condition: service_healthy


  extractor:
    build: ./extractor
    container_name: extractor
    # On-demand starten (oder via Task Scheduler/cron per 'docker compose run --rm extractor')
    restart: "no"
    depends_on:
      - cowrie
      - pcap-capture
    volumes:
      - ./data/pcap:/data/pcap:ro
      - ./cowrie/data:/cowrie/data:ro
      - ./data/out:/data/out
